
HMC1053.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  08005268  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08005268  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125f5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002607  00000000  00000000  00032695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bda  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012185  00000000  00000000  0005a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de827  00000000  00000000  0006c667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ae8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  0014aee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005168 	.word	0x08005168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005168 	.word	0x08005168

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0a      	blt.n	80005d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <__NVIC_SetPriority+0x4c>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	440b      	add	r3, r1
 80005cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d0:	e00a      	b.n	80005e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <__NVIC_SetPriority+0x50>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	3b04      	subs	r3, #4
 80005e0:	0112      	lsls	r2, r2, #4
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	440b      	add	r3, r1
 80005e6:	761a      	strb	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000e100 	.word	0xe000e100
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800060c:	d301      	bcc.n	8000612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800060e:	2301      	movs	r3, #1
 8000610:	e00f      	b.n	8000632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <SysTick_Config+0x40>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061a:	210f      	movs	r1, #15
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f7ff ffc2 	bl	80005a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <SysTick_Config+0x40>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <SysTick_Config+0x40>)
 800062c:	2207      	movs	r2, #7
 800062e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]

	 msgLength=sprintf(msg, "%d, %d, %d, %d \r\n",  adc_value[0],adc_value[1], adc_value[2], milisegundos);
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_ADC_ConvCpltCallback+0x48>)
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_ADC_ConvCpltCallback+0x48>)
 800064e:	6858      	ldr	r0, [r3, #4]
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_ADC_ConvCpltCallback+0x48>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	4603      	mov	r3, r0
 800065e:	460a      	mov	r2, r1
 8000660:	490b      	ldr	r1, [pc, #44]	; (8000690 <HAL_ADC_ConvCpltCallback+0x50>)
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <HAL_ADC_ConvCpltCallback+0x54>)
 8000664:	f004 f952 	bl	800490c <siprintf>
 8000668:	4603      	mov	r3, r0
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_ADC_ConvCpltCallback+0x58>)
 800066e:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Transmit(&huart2, (uint8_t*) msg, msgLength, 10);
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_ADC_ConvCpltCallback+0x58>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29a      	uxth	r2, r3
 8000676:	230a      	movs	r3, #10
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <HAL_ADC_ConvCpltCallback+0x54>)
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <HAL_ADC_ConvCpltCallback+0x5c>)
 800067c:	f003 f9f9 	bl	8003a72 <HAL_UART_Transmit>

}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000d4 	.word	0x200000d4
 800068c:	2000008c 	.word	0x2000008c
 8000690:	08005180 	.word	0x08005180
 8000694:	200000a0 	.word	0x200000a0
 8000698:	200000d2 	.word	0x200000d2
 800069c:	200001d8 	.word	0x200001d8

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fc08 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f826 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f99a 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b0:	f000 f978 	bl	80009a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006b4:	f000 f94c 	bl	8000950 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006b8:	f000 f890 	bl	80007dc <MX_ADC1_Init>
  MX_TIM2_Init();
 80006bc:	f000 f8fc 	bl	80008b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start(&htim2);
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x44>)
 80006c2:	f002 fea3 	bl	800340c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_value, 3); // LONGITUD DE 3 NUMERO DE CANALES QUE ETSAMOS CONVIRTIENDO
 80006c6:	2203      	movs	r2, #3
 80006c8:	4907      	ldr	r1, [pc, #28]	; (80006e8 <main+0x48>)
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <main+0x4c>)
 80006cc:	f000 fdea 	bl	80012a4 <HAL_ADC_Start_DMA>

 // HAL_ADC_Start_IT(&hadc1);
 // HAL_TIM_Base_Start_IT(&htim2);//timer adc
  SysTick_Config(SystemCoreClock / 1000);  // LA INTERRUPCIÓN SALTA CADA 1MS-> variable para ver cada cuanto enviamos por la uart
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <main+0x50>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <main+0x54>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	099b      	lsrs	r3, r3, #6
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff8d 	bl	80005fc <SysTick_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x42>
 80006e4:	20000190 	.word	0x20000190
 80006e8:	200000d4 	.word	0x200000d4
 80006ec:	200000e0 	.word	0x200000e0
 80006f0:	20000000 	.word	0x20000000
 80006f4:	10624dd3 	.word	0x10624dd3

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f8f8 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xdc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <SystemClock_Config+0xdc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xdc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xe0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800076c:	23b4      	movs	r3, #180	; 0xb4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fb55 	bl	8002e30 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800078c:	f000 f998 	bl	8000ac0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f002 f832 	bl	80027f8 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079a:	f000 f991 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f86b 	bl	8002898 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c8:	f000 f97a 	bl	8000ac0 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007f0:	4a30      	ldr	r2, [pc, #192]	; (80008b4 <MX_ADC1_Init+0xd8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000804:	2201      	movs	r2, #1
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000820:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800082e:	2203      	movs	r2, #3
 8000830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000834:	2201      	movs	r2, #1
 8000836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	481b      	ldr	r0, [pc, #108]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000842:	f000 fbab 	bl	8000f9c <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800084c:	f000 f938 	bl	8000ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000858:	2301      	movs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000862:	f000 fe4d 	bl	8001500 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800086c:	f000 f928 	bl	8000ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000870:	2301      	movs	r3, #1
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800087e:	f000 fe3f 	bl	8001500 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000888:	f000 f91a 	bl	8000ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800088c:	230b      	movs	r3, #11
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000890:	2303      	movs	r3, #3
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800089a:	f000 fe31 	bl	8001500 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80008a4:	f000 f90c 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000e0 	.word	0x200000e0
 80008b4:	40012000 	.word	0x40012000

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM2_Init+0x94>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM2_Init+0x94>)
 80008de:	2259      	movs	r2, #89	; 0x59
 80008e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM2_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM2_Init+0x94>)
 80008ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM2_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM2_Init+0x94>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_TIM2_Init+0x94>)
 80008fe:	f002 fd35 	bl	800336c <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000908:	f000 f8da 	bl	8000ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM2_Init+0x94>)
 800091a:	f002 fddf 	bl	80034dc <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f8cc 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000928:	2320      	movs	r3, #32
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM2_Init+0x94>)
 8000936:	f002 ffd3 	bl	80038e0 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f8be 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000190 	.word	0x20000190

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x48>)
 800095c:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x50>)
 800095e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x48>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000974:	220c      	movs	r2, #12
 8000976:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_USART2_UART_Init+0x48>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_USART2_UART_Init+0x48>)
 8000986:	f003 f827 	bl	80039d8 <HAL_UART_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000990:	f000 f896 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001d8 	.word	0x200001d8
 800099c:	40004400 	.word	0x40004400
 80009a0:	001e8480 	.word	0x001e8480

080009a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2038      	movs	r0, #56	; 0x38
 80009cc:	f001 f92d 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d0:	2038      	movs	r0, #56	; 0x38
 80009d2:	f001 f946 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0xd4>)
 8000a70:	f001 fea8 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_GPIO_Init+0xd8>)
 8000a8c:	f001 fd06 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xd4>)
 8000aa8:	f001 fcf8 	bl	800249c <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020800 	.word	0x40020800

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f001 f882 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <HAL_ADC_MspInit+0x120>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d179      	bne.n	8000c32 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a3e      	ldr	r2, [pc, #248]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a30      	ldr	r2, [pc, #192]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_ADC_MspInit+0x124>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b92:	2302      	movs	r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4827      	ldr	r0, [pc, #156]	; (8000c44 <HAL_ADC_MspInit+0x128>)
 8000ba6:	f001 fc79 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000baa:	2303      	movs	r3, #3
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4822      	ldr	r0, [pc, #136]	; (8000c48 <HAL_ADC_MspInit+0x12c>)
 8000bbe:	f001 fc6d 	bl	800249c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_ADC_MspInit+0x134>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c06:	4811      	ldr	r0, [pc, #68]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000c08:	f001 f846 	bl	8001c98 <HAL_DMA_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000c12:	f7ff ff55 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_ADC_MspInit+0x130>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2012      	movs	r0, #18
 8000c28:	f000 ffff 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f001 f818 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40012000 	.word	0x40012000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	2000012c 	.word	0x2000012c
 8000c50:	40026410 	.word	0x40026410

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d10d      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_TIM_Base_MspInit+0x3c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_TIM_Base_MspInit+0x3c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x94>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d133      	bne.n	8000d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_UART_MspInit+0x9c>)
 8000d0a:	f001 fbc7 	bl	800249c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f000 ff89 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d18:	2026      	movs	r0, #38	; 0x26
 8000d1a:	f000 ffa2 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	milisegundos= milisegundos+1;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Handler+0x18>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <SysTick_Handler+0x18>)
 8000d88:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f8e7 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <ADC_IRQHandler+0x10>)
 8000d9e:	f000 f940 	bl	8001022 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e0 	.word	0x200000e0

08000dac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <USART2_IRQHandler+0x10>)
 8000db2:	f002 fef1 	bl	8003b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001d8 	.word	0x200001d8

08000dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8000dc6:	f001 f8ff 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000012c 	.word	0x2000012c

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f003 fd50 	bl	80048a8 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20020000 	.word	0x20020000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	20000090 	.word	0x20000090
 8000e3c:	20000230 	.word	0x20000230

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f003 fd0f 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fc03 	bl	80006a0 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea8:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8000eac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb0:	20000230 	.word	0x20000230

08000eb4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <CAN1_RX0_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 fe97 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fdee 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 feaf 	bl	8001c7e <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 fe77 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000021c 	.word	0x2000021c

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000021c 	.word	0x2000021c

08000f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e033      	b.n	800101a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fdae 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	f043 0202 	orr.w	r2, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fbb8 	bl	8001764 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f023 0303 	bic.w	r3, r3, #3
 8001002:	f043 0201 	orr.w	r2, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
 800100a:	e001      	b.n	8001010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b02      	cmp	r3, #2
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b20      	cmp	r3, #32
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d049      	beq.n	80010f8 <HAL_ADC_IRQHandler+0xd6>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d046      	beq.n	80010f8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d12b      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001094:	2b00      	cmp	r3, #0
 8001096:	d127      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d119      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0220 	bic.w	r2, r2, #32
 80010c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f043 0201 	orr.w	r2, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff faa9 	bl	8000640 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f06f 0212 	mvn.w	r2, #18
 80010f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001118:	2b80      	cmp	r3, #128	; 0x80
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d057      	beq.n	80011da <HAL_ADC_IRQHandler+0x1b8>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d054      	beq.n	80011da <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d139      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800116e:	2b00      	cmp	r3, #0
 8001170:	d12b      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d124      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d11d      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001192:	2b00      	cmp	r3, #0
 8001194:	d119      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fc48 	bl	8001a60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 020c 	mvn.w	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	2b40      	cmp	r3, #64	; 0x40
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d017      	beq.n	800123c <HAL_ADC_IRQHandler+0x21a>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d014      	beq.n	800123c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10d      	bne.n	800123c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f953 	bl	80014d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f06f 0201 	mvn.w	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	2b20      	cmp	r3, #32
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800125c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d015      	beq.n	800129c <HAL_ADC_IRQHandler+0x27a>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d012      	beq.n	800129c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f043 0202 	orr.w	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f06f 0220 	mvn.w	r2, #32
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f92d 	bl	80014ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f06f 0220 	mvn.w	r2, #32
 800129a:	601a      	str	r2, [r3, #0]
  }
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x1e>
 80012be:	2302      	movs	r3, #2
 80012c0:	e0e9      	b.n	8001496 <HAL_ADC_Start_DMA+0x1f2>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d018      	beq.n	800130a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e8:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <HAL_ADC_Start_DMA+0x1fc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a6d      	ldr	r2, [pc, #436]	; (80014a4 <HAL_ADC_Start_DMA+0x200>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9a      	lsrs	r2, r3, #18
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012fc:	e002      	b.n	8001304 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	3b01      	subs	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001318:	d107      	bne.n	800132a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001328:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	f040 80a1 	bne.w	800147c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001364:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001378:	d106      	bne.n	8001388 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f023 0206 	bic.w	r2, r3, #6
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
 8001386:	e002      	b.n	800138e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001396:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_ADC_Start_DMA+0x204>)
 8001398:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	4a43      	ldr	r2, [pc, #268]	; (80014ac <HAL_ADC_Start_DMA+0x208>)
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <HAL_ADC_Start_DMA+0x20c>)
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	4a41      	ldr	r2, [pc, #260]	; (80014b4 <HAL_ADC_Start_DMA+0x210>)
 80013b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	334c      	adds	r3, #76	; 0x4c
 80013e6:	4619      	mov	r1, r3
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f000 fd02 	bl	8001df4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12a      	bne.n	8001452 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_ADC_Start_DMA+0x214>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d015      	beq.n	8001432 <HAL_ADC_Start_DMA+0x18e>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <HAL_ADC_Start_DMA+0x218>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d105      	bne.n	800141c <HAL_ADC_Start_DMA+0x178>
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_ADC_Start_DMA+0x204>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 031f 	and.w	r3, r3, #31
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00a      	beq.n	8001432 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_ADC_Start_DMA+0x21c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d136      	bne.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_ADC_Start_DMA+0x204>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d130      	bne.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d129      	bne.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e020      	b.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_ADC_Start_DMA+0x214>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d11b      	bne.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d114      	bne.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e00b      	b.n	8001494 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f043 0210 	orr.w	r2, r3, #16
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	40012300 	.word	0x40012300
 80014ac:	0800195d 	.word	0x0800195d
 80014b0:	08001a17 	.word	0x08001a17
 80014b4:	08001a33 	.word	0x08001a33
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40012100 	.word	0x40012100
 80014c0:	40012200 	.word	0x40012200

080014c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1c>
 8001518:	2302      	movs	r3, #2
 800151a:	e113      	b.n	8001744 <HAL_ADC_ConfigChannel+0x244>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b09      	cmp	r3, #9
 800152a:	d925      	bls.n	8001578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68d9      	ldr	r1, [r3, #12]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	3b1e      	subs	r3, #30
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	4603      	mov	r3, r0
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4403      	add	r3, r0
 800156a:	3b1e      	subs	r3, #30
 800156c:	409a      	lsls	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	e022      	b.n	80015be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	2207      	movs	r2, #7
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	400a      	ands	r2, r1
 800159a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6919      	ldr	r1, [r3, #16]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4403      	add	r3, r0
 80015b4:	409a      	lsls	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d824      	bhi.n	8001610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b05      	subs	r3, #5
 80015d8:	221f      	movs	r2, #31
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b05      	subs	r3, #5
 8001602:	fa00 f203 	lsl.w	r2, r0, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
 800160e:	e04c      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d824      	bhi.n	8001662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b23      	subs	r3, #35	; 0x23
 800162a:	221f      	movs	r2, #31
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43da      	mvns	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	400a      	ands	r2, r1
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3b23      	subs	r3, #35	; 0x23
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
 8001660:	e023      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	3b41      	subs	r3, #65	; 0x41
 8001674:	221f      	movs	r2, #31
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b41      	subs	r3, #65	; 0x41
 800169e:	fa00 f203 	lsl.w	r2, r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_ADC_ConfigChannel+0x250>)
 80016ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_ADC_ConfigChannel+0x254>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d10f      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1d8>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d10b      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_ADC_ConfigChannel+0x254>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12b      	bne.n	800173a <HAL_ADC_ConfigChannel+0x23a>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_ADC_ConfigChannel+0x258>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x1f4>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b11      	cmp	r3, #17
 80016f2:	d122      	bne.n	800173a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_ADC_ConfigChannel+0x258>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d111      	bne.n	800173a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_ADC_ConfigChannel+0x25c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <HAL_ADC_ConfigChannel+0x260>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	0c9a      	lsrs	r2, r3, #18
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800172c:	e002      	b.n	8001734 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3b01      	subs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f9      	bne.n	800172e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40012300 	.word	0x40012300
 8001754:	40012000 	.word	0x40012000
 8001758:	10000012 	.word	0x10000012
 800175c:	20000000 	.word	0x20000000
 8001760:	431bde83 	.word	0x431bde83

08001764 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <ADC_Init+0x1f0>)
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	431a      	orrs	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	021a      	lsls	r2, r3, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	4a58      	ldr	r2, [pc, #352]	; (8001958 <ADC_Init+0x1f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800180a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800182c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6899      	ldr	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e00f      	b.n	8001862 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0202 	bic.w	r2, r2, #2
 8001870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7e1b      	ldrb	r3, [r3, #24]
 800187c:	005a      	lsls	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01b      	beq.n	80018c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800189e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	3b01      	subs	r3, #1
 80018bc:	035a      	lsls	r2, r3, #13
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	e007      	b.n	80018d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	051a      	lsls	r2, r3, #20
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800190c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6899      	ldr	r1, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191a:	025a      	lsls	r2, r3, #9
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6899      	ldr	r1, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	029a      	lsls	r2, r3, #10
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40012300 	.word	0x40012300
 8001958:	0f000001 	.word	0x0f000001

0800195c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001972:	2b00      	cmp	r3, #0
 8001974:	d13c      	bne.n	80019f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d12b      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d127      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0220 	bic.w	r2, r2, #32
 80019c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7fe fe29 	bl	8000640 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019ee:	e00e      	b.n	8001a0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fd75 	bl	80014ec <HAL_ADC_ErrorCallback>
}
 8001a02:	e004      	b.n	8001a0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff fd4d 	bl	80014c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd4a 	bl	80014ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <__NVIC_SetPriorityGrouping>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff f96e 	bl	8000f84 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e099      	b.n	8001de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	e00f      	b.n	8001cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd6:	f7ff f955 	bl	8000f84 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d908      	bls.n	8001cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e078      	b.n	8001de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e8      	bne.n	8001cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_DMA_Init+0x158>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d107      	bne.n	8001d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d117      	bne.n	8001dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fb01 	bl	80023a4 <DMA_CheckFifoParam>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db6:	2301      	movs	r3, #1
 8001db8:	e016      	b.n	8001de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fab8 	bl	8002338 <DMA_CalcBaseAndBitshift>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	f010803f 	.word	0xf010803f

08001df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_DMA_Start_IT+0x26>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e040      	b.n	8001e9c <HAL_DMA_Start_IT+0xa8>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d12f      	bne.n	8001e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fa4a 	bl	80022dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	223f      	movs	r2, #63	; 0x3f
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0216 	orr.w	r2, r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0208 	orr.w	r2, r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e005      	b.n	8001e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb2:	f7ff f867 	bl	8000f84 <HAL_GetTick>
 8001eb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e052      	b.n	8001f7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0216 	bic.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_DMA_Abort+0x62>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	e013      	b.n	8001f50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f28:	f7ff f82c 	bl	8000f84 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d90c      	bls.n	8001f50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e015      	b.n	8001f7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e4      	bne.n	8001f28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d004      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00c      	b.n	8001fbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fd4:	4b92      	ldr	r3, [pc, #584]	; (8002220 <HAL_DMA_IRQHandler+0x258>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a92      	ldr	r2, [pc, #584]	; (8002224 <HAL_DMA_IRQHandler+0x25c>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0a9b      	lsrs	r3, r3, #10
 8001fe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01a      	beq.n	8002034 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2208      	movs	r2, #8
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d012      	beq.n	800206a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2201      	movs	r2, #1
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2204      	movs	r2, #4
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2204      	movs	r2, #4
 800208e:	409a      	lsls	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2210      	movs	r2, #16
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d043      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03c      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2210      	movs	r2, #16
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d018      	beq.n	800210a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d024      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
 80020f6:	e01f      	b.n	8002138 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
 8002108:	e016      	b.n	8002138 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0208 	bic.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2220      	movs	r2, #32
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 808e 	beq.w	8002266 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8086 	beq.w	8002266 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2220      	movs	r2, #32
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b05      	cmp	r3, #5
 8002170:	d136      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0216 	bic.w	r2, r2, #22
 8002180:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002190:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x1da>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0208 	bic.w	r2, r2, #8
 80021b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	223f      	movs	r2, #63	; 0x3f
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d07d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
        }
        return;
 80021de:	e078      	b.n	80022d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01c      	beq.n	8002228 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	2b00      	cmp	r3, #0
 8002202:	d030      	beq.n	8002266 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e02b      	b.n	8002266 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d027      	beq.n	8002266 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e022      	b.n	8002266 <HAL_DMA_IRQHandler+0x29e>
 8002220:	20000000 	.word	0x20000000
 8002224:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10f      	bne.n	8002256 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0210 	bic.w	r2, r2, #16
 8002244:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	2b00      	cmp	r3, #0
 800226c:	d032      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d022      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	d307      	bcc.n	80022ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f2      	bne.n	8002292 <HAL_DMA_IRQHandler+0x2ca>
 80022ac:	e000      	b.n	80022b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022ae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e000      	b.n	80022d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022d2:	bf00      	nop
    }
  }
}
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop

080022dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	d108      	bne.n	800231c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231a:	e007      	b.n	800232c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3b10      	subs	r3, #16
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <DMA_CalcBaseAndBitshift+0x64>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d909      	bls.n	800237a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	659a      	str	r2, [r3, #88]	; 0x58
 8002378:	e007      	b.n	800238a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	aaaaaaab 	.word	0xaaaaaaab
 80023a0:	080051ac 	.word	0x080051ac

080023a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0x5a>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d856      	bhi.n	8002472 <DMA_CheckFifoParam+0xce>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <DMA_CheckFifoParam+0x28>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023ef 	.word	0x080023ef
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	08002473 	.word	0x08002473
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d046      	beq.n	8002476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ec:	e043      	b.n	8002476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f6:	d140      	bne.n	800247a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fc:	e03d      	b.n	800247a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	d121      	bne.n	800244c <DMA_CheckFifoParam+0xa8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d837      	bhi.n	800247e <DMA_CheckFifoParam+0xda>
 800240e:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <DMA_CheckFifoParam+0x70>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002425 	.word	0x08002425
 8002418:	0800242b 	.word	0x0800242b
 800241c:	08002425 	.word	0x08002425
 8002420:	0800243d 	.word	0x0800243d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e030      	b.n	800248c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d025      	beq.n	8002482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e022      	b.n	8002482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002444:	d11f      	bne.n	8002486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244a:	e01c      	b.n	8002486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d903      	bls.n	800245a <DMA_CheckFifoParam+0xb6>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002458:	e018      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      break;
 800245e:	e015      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e00b      	b.n	800248a <DMA_CheckFifoParam+0xe6>
      break;
 8002472:	bf00      	nop
 8002474:	e00a      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e008      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e006      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e004      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;   
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
    }
  } 
  
  return status; 
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e165      	b.n	8002784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8154 	bne.w	800277e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80ae 	beq.w	800277e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_GPIO_Init+0x300>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a5c      	ldr	r2, [pc, #368]	; (800279c <HAL_GPIO_Init+0x300>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b5a      	ldr	r3, [pc, #360]	; (800279c <HAL_GPIO_Init+0x300>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <HAL_GPIO_Init+0x304>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	; (80027a4 <HAL_GPIO_Init+0x308>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d025      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4d      	ldr	r2, [pc, #308]	; (80027ac <HAL_GPIO_Init+0x310>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_GPIO_Init+0x314>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4b      	ldr	r2, [pc, #300]	; (80027b4 <HAL_GPIO_Init+0x318>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x20a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <HAL_GPIO_Init+0x31c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x206>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a49      	ldr	r2, [pc, #292]	; (80027bc <HAL_GPIO_Init+0x320>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x202>
 800269a:	2306      	movs	r3, #6
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	; (80027a0 <HAL_GPIO_Init+0x304>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_GPIO_Init+0x324>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fa:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002700:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae96 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_PWREx_EnableOverDrive+0x90>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_PWREx_EnableOverDrive+0x90>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_PWREx_EnableOverDrive+0x90>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_PWREx_EnableOverDrive+0x94>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7fe fbae 	bl	8000f84 <HAL_GetTick>
 8002828:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800282a:	e009      	b.n	8002840 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800282c:	f7fe fbaa 	bl	8000f84 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800283a:	d901      	bls.n	8002840 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e01f      	b.n	8002880 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_PWREx_EnableOverDrive+0x98>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d1ee      	bne.n	800282c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002854:	f7fe fb96 	bl	8000f84 <HAL_GetTick>
 8002858:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800285a:	e009      	b.n	8002870 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800285c:	f7fe fb92 	bl	8000f84 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286a:	d901      	bls.n	8002870 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e007      	b.n	8002880 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_PWREx_EnableOverDrive+0x98>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800287c:	d1ee      	bne.n	800285c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	420e0040 	.word	0x420e0040
 8002890:	40007000 	.word	0x40007000
 8002894:	420e0044 	.word	0x420e0044

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cc      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d90c      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d044      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d119      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e067      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4934      	ldr	r1, [pc, #208]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002988:	f7fe fafc 	bl	8000f84 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe faf8 	bl	8000f84 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e04f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d20c      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f855 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fa5c 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08005194 	.word	0x08005194
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	080051a4 	.word	0x080051a4

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffdc 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	080051a4 	.word	0x080051a4

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4bce      	ldr	r3, [pc, #824]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	f200 818d 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x344>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_RCC_GetSysClockFreq+0x30>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002e11 	.word	0x08002e11
 8002b04:	08002e11 	.word	0x08002e11
 8002b08:	08002e11 	.word	0x08002e11
 8002b0c:	08002b37 	.word	0x08002b37
 8002b10:	08002e11 	.word	0x08002e11
 8002b14:	08002e11 	.word	0x08002e11
 8002b18:	08002e11 	.word	0x08002e11
 8002b1c:	08002b3d 	.word	0x08002b3d
 8002b20:	08002e11 	.word	0x08002e11
 8002b24:	08002e11 	.word	0x08002e11
 8002b28:	08002e11 	.word	0x08002e11
 8002b2c:	08002cb1 	.word	0x08002cb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4bbd      	ldr	r3, [pc, #756]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b32:	61bb      	str	r3, [r7, #24]
       break;
 8002b34:	e16f      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4bbd      	ldr	r3, [pc, #756]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x360>)
 8002b38:	61bb      	str	r3, [r7, #24]
      break;
 8002b3a:	e16c      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4bb9      	ldr	r3, [pc, #740]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4bb7      	ldr	r3, [pc, #732]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d053      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4bb4      	ldr	r3, [pc, #720]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	ea02 0400 	and.w	r4, r2, r0
 8002b6a:	603c      	str	r4, [r7, #0]
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	014b      	lsls	r3, r1, #5
 8002b82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b86:	0142      	lsls	r2, r0, #5
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	1ac0      	subs	r0, r0, r3
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb61 0103 	sbc.w	r1, r1, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	018b      	lsls	r3, r1, #6
 8002ba0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ba4:	0182      	lsls	r2, r0, #6
 8002ba6:	1a12      	subs	r2, r2, r0
 8002ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	00d9      	lsls	r1, r3, #3
 8002bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bba:	00d0      	lsls	r0, r2, #3
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	1852      	adds	r2, r2, r1
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	eb43 0101 	adc.w	r1, r3, r1
 8002bca:	460b      	mov	r3, r1
 8002bcc:	f04f 0000 	mov.w	r0, #0
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	0259      	lsls	r1, r3, #9
 8002bd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bda:	0250      	lsls	r0, r2, #9
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f7fd fb60 	bl	80002b0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e04c      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfa:	4b8a      	ldr	r3, [pc, #552]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	461a      	mov	r2, r3
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	ea02 0a00 	and.w	sl, r2, r0
 8002c12:	ea03 0b01 	and.w	fp, r3, r1
 8002c16:	4650      	mov	r0, sl
 8002c18:	4659      	mov	r1, fp
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	014b      	lsls	r3, r1, #5
 8002c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c28:	0142      	lsls	r2, r0, #5
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	ebb0 000a 	subs.w	r0, r0, sl
 8002c32:	eb61 010b 	sbc.w	r1, r1, fp
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	018b      	lsls	r3, r1, #6
 8002c40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c44:	0182      	lsls	r2, r0, #6
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	00d9      	lsls	r1, r3, #3
 8002c56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5a:	00d0      	lsls	r0, r2, #3
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	eb12 020a 	adds.w	r2, r2, sl
 8002c64:	eb43 030b 	adc.w	r3, r3, fp
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0299      	lsls	r1, r3, #10
 8002c72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c76:	0290      	lsls	r0, r2, #10
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f7fd fb12 	bl	80002b0 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c94:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	61bb      	str	r3, [r7, #24]
      break;
 8002cae:	e0b2      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb0:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cba:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d04d      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc6:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	ea02 0800 	and.w	r8, r2, r0
 8002cde:	ea03 0901 	and.w	r9, r3, r1
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	014b      	lsls	r3, r1, #5
 8002cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cf4:	0142      	lsls	r2, r0, #5
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	ebb0 0008 	subs.w	r0, r0, r8
 8002cfe:	eb61 0109 	sbc.w	r1, r1, r9
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	018b      	lsls	r3, r1, #6
 8002d0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d10:	0182      	lsls	r2, r0, #6
 8002d12:	1a12      	subs	r2, r2, r0
 8002d14:	eb63 0301 	sbc.w	r3, r3, r1
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	00d9      	lsls	r1, r3, #3
 8002d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d26:	00d0      	lsls	r0, r2, #3
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	eb12 0208 	adds.w	r2, r2, r8
 8002d30:	eb43 0309 	adc.w	r3, r3, r9
 8002d34:	f04f 0000 	mov.w	r0, #0
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	0259      	lsls	r1, r3, #9
 8002d3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d42:	0250      	lsls	r0, r2, #9
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	f7fd faac 	bl	80002b0 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e04a      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	ea02 0400 	and.w	r4, r2, r0
 8002d7a:	ea03 0501 	and.w	r5, r3, r1
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	014b      	lsls	r3, r1, #5
 8002d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d90:	0142      	lsls	r2, r0, #5
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	1b00      	subs	r0, r0, r4
 8002d98:	eb61 0105 	sbc.w	r1, r1, r5
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	018b      	lsls	r3, r1, #6
 8002da6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002daa:	0182      	lsls	r2, r0, #6
 8002dac:	1a12      	subs	r2, r2, r0
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	00d9      	lsls	r1, r3, #3
 8002dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dc0:	00d0      	lsls	r0, r2, #3
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	1912      	adds	r2, r2, r4
 8002dc8:	eb45 0303 	adc.w	r3, r5, r3
 8002dcc:	f04f 0000 	mov.w	r0, #0
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	0299      	lsls	r1, r3, #10
 8002dd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dda:	0290      	lsls	r0, r2, #10
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f7fd fa60 	bl	80002b0 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0f1b      	lsrs	r3, r3, #28
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	61bb      	str	r3, [r7, #24]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e12:	61bb      	str	r3, [r7, #24]
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	69bb      	ldr	r3, [r7, #24]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e28d      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8083 	beq.w	8002f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e50:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d019      	beq.n	8002e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e5c:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e68:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05b      	beq.n	8002f54 <HAL_RCC_OscConfig+0x124>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d157      	bne.n	8002f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e25a      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x90>
 8002eb2:	4b7c      	ldr	r3, [pc, #496]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7b      	ldr	r2, [pc, #492]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xcc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xb4>
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a72      	ldr	r2, [pc, #456]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xcc>
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6b      	ldr	r2, [pc, #428]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe f83e 	bl	8000f84 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe f83a 	bl	8000f84 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e21f      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xdc>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f82a 	bl	8000f84 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe f826 	bl	8000f84 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e20b      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x104>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06f      	beq.n	8003042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f62:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x186>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1d3      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e03a      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x278>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fd ffd3 	bl	8000f84 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fd ffcf 	bl	8000f84 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1b4      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4925      	ldr	r1, [pc, #148]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	e015      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x278>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fd ffb2 	bl	8000f84 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7fd ffae 	bl	8000f84 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e193      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x27c>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fd ff92 	bl	8000f84 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7fd ff8e 	bl	8000f84 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e173      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x234>
 8003082:	e01b      	b.n	80030bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_OscConfig+0x27c>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fd ff7b 	bl	8000f84 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	e00e      	b.n	80030b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003092:	f7fd ff77 	bl	8000f84 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d907      	bls.n	80030b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e15c      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470000 	.word	0x42470000
 80030ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b8a      	ldr	r3, [pc, #552]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8097 	beq.w	80031f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b83      	ldr	r3, [pc, #524]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a7e      	ldr	r2, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7fd ff37 	bl	8000f84 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd ff33 	bl	8000f84 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e118      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x4b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x31e>
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x358>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x340>
 8003156:	4b61      	ldr	r3, [pc, #388]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x358>
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a59      	ldr	r2, [pc, #356]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	4b57      	ldr	r3, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fef8 	bl	8000f84 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fd fef4 	bl	8000f84 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0d7      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ee      	beq.n	8003198 <HAL_RCC_OscConfig+0x368>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fee2 	bl	8000f84 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fd fede 	bl	8000f84 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0c1      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	4b40      	ldr	r3, [pc, #256]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ee      	bne.n	80031c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80ad 	beq.w	800335c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d060      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d145      	bne.n	80032a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd feb2 	bl	8000f84 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd feae 	bl	8000f84 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e093      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fd fe83 	bl	8000f84 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fd fe7f 	bl	8000f84 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e064      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x452>
 80032a0:	e05c      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0x4b4>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fe6c 	bl	8000f84 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fd fe68 	bl	8000f84 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04d      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x480>
 80032ce:	e045      	b.n	800335c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e040      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <HAL_RCC_OscConfig+0x538>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d030      	beq.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d129      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d122      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	4293      	cmp	r3, r2
 8003322:	d119      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d10f      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e041      	b.n	8003402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fc5e 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 f95e 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e046      	b.n	80034b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_TIM_Base_Start+0xb4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d01d      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_TIM_Base_Start+0xb8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_TIM_Base_Start+0xbc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_TIM_Base_Start+0xc0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_TIM_Base_Start+0xc4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_TIM_Base_Start+0xc8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start+0x70>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <HAL_TIM_Base_Start+0xcc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d010      	beq.n	80034b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e007      	b.n	80034b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40010400 	.word	0x40010400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40001800 	.word	0x40001800

080034dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIM_ConfigClockSource+0x1c>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e0b4      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x186>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003530:	d03e      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003536:	f200 8087 	bhi.w	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	f000 8086 	beq.w	800364e <HAL_TIM_ConfigClockSource+0x172>
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003546:	d87f      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b70      	cmp	r3, #112	; 0x70
 800354a:	d01a      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xa6>
 800354c:	2b70      	cmp	r3, #112	; 0x70
 800354e:	d87b      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b60      	cmp	r3, #96	; 0x60
 8003552:	d050      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003554:	2b60      	cmp	r3, #96	; 0x60
 8003556:	d877      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b50      	cmp	r3, #80	; 0x50
 800355a:	d03c      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xfa>
 800355c:	2b50      	cmp	r3, #80	; 0x50
 800355e:	d873      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d058      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x13a>
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d86f      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b30      	cmp	r3, #48	; 0x30
 800356a:	d064      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b30      	cmp	r3, #48	; 0x30
 800356e:	d86b      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b20      	cmp	r3, #32
 8003572:	d060      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b20      	cmp	r3, #32
 8003576:	d867      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05c      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 800357c:	2b10      	cmp	r3, #16
 800357e:	d05a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	e062      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f000 f985 	bl	80038a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	609a      	str	r2, [r3, #8]
      break;
 80035ae:	e04f      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f000 f96e 	bl	80038a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d2:	609a      	str	r2, [r3, #8]
      break;
 80035d4:	e03c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 f8e2 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2150      	movs	r1, #80	; 0x50
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f93b 	bl	800386a <TIM_ITRx_SetConfig>
      break;
 80035f4:	e02c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	461a      	mov	r2, r3
 8003604:	f000 f901 	bl	800380a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2160      	movs	r1, #96	; 0x60
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f92b 	bl	800386a <TIM_ITRx_SetConfig>
      break;
 8003614:	e01c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	461a      	mov	r2, r3
 8003624:	f000 f8c2 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2140      	movs	r1, #64	; 0x40
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f91b 	bl	800386a <TIM_ITRx_SetConfig>
      break;
 8003634:	e00c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 f912 	bl	800386a <TIM_ITRx_SetConfig>
      break;
 8003646:	e003      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e000      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800364e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <TIM_Base_SetConfig+0x118>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <TIM_Base_SetConfig+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <TIM_Base_SetConfig+0x118>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <TIM_Base_SetConfig+0x128>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <TIM_Base_SetConfig+0x130>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <TIM_Base_SetConfig+0x134>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <TIM_Base_SetConfig+0x138>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <TIM_Base_SetConfig+0x124>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40010400 	.word	0x40010400
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800
 80037a0:	40001800 	.word	0x40001800
 80037a4:	40001c00 	.word	0x40001c00
 80037a8:	40002000 	.word	0x40002000

080037ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 030a 	bic.w	r3, r3, #10
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0210 	bic.w	r2, r3, #16
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	f043 0307 	orr.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	021a      	lsls	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	609a      	str	r2, [r3, #8]
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e05a      	b.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10c      	bne.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4313      	orrs	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40010000 	.word	0x40010000
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40010400 	.word	0x40010400
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40001800 	.word	0x40001800

080039d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e03f      	b.n	8003a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd f948 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fd7b 	bl	8004518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b08a      	sub	sp, #40	; 0x28
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d17c      	bne.n	8003b8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_Transmit+0x2c>
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e075      	b.n	8003b8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Transmit+0x3e>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e06e      	b.n	8003b8e <HAL_UART_Transmit+0x11c>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fa5d 	bl	8000f84 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x82>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b04:	e02a      	b.n	8003b5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 faf9 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e036      	b.n	8003b8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cf      	bne.n	8003b06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fac9 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e006      	b.n	8003b8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0ba      	sub	sp, #232	; 0xe8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fbd3 	bl	80043a2 <UART_Receive_IT>
      return;
 8003bfc:	e256      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80de 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
 8003c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80d1 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0208 	orr.w	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 81ed 	beq.w	80040a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb5e 	bl	80043a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_UART_IRQHandler+0x17a>
 8003d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d04f      	beq.n	8003db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa66 	bl	80041e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d141      	bne.n	8003daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d013      	beq.n	8003da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_UART_IRQHandler+0x3dc>)
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe f8fc 	bl	8001f84 <HAL_DMA_Abort_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	e00e      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f99a 	bl	80040dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e00a      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f996 	bl	80040dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e006      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f992 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dbe:	e170      	b.n	80040a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	bf00      	nop
    return;
 8003dc2:	e16e      	b.n	80040a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	f040 814a 	bne.w	8004062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8143 	beq.w	8004062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 813c 	beq.w	8004062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	f040 80b4 	bne.w	8003f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8140 	beq.w	80040a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f080 8139 	bcs.w	80040a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e46:	f000 8088 	beq.w	8003f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d9      	bne.n	8003e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e1      	bne.n	8003e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e3      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	f023 0310 	bic.w	r3, r3, #16
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e3      	bne.n	8003f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd ffa5 	bl	8001ea4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8c0 	bl	80040f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f70:	e099      	b.n	80040a6 <HAL_UART_IRQHandler+0x50e>
 8003f72:	bf00      	nop
 8003f74:	080042ab 	.word	0x080042ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 808b 	beq.w	80040aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8086 	beq.w	80040aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e3      	bne.n	8003f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e3      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	60fb      	str	r3, [r7, #12]
   return(result);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004040:	61fa      	str	r2, [r7, #28]
 8004042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	617b      	str	r3, [r7, #20]
   return(result);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e3      	bne.n	800401c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f848 	bl	80040f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004060:	e023      	b.n	80040aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_UART_IRQHandler+0x4ea>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f929 	bl	80042d2 <UART_Transmit_IT>
    return;
 8004080:	e014      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <HAL_UART_IRQHandler+0x514>
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f969 	bl	8004372 <UART_EndTransmit_IT>
    return;
 80040a0:	e004      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
    return;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
      return;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
      return;
 80040aa:	bf00      	nop
  }
}
 80040ac:	37e8      	adds	r7, #232	; 0xe8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop

080040b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b090      	sub	sp, #64	; 0x40
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	e050      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d04c      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <UART_WaitOnFlagUntilTimeout+0x30>
 8004128:	f7fc ff2c 	bl	8000f84 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004134:	429a      	cmp	r2, r3
 8004136:	d241      	bcs.n	80041bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004158:	637a      	str	r2, [r7, #52]	; 0x34
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800415e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	613b      	str	r3, [r7, #16]
   return(result);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418c:	623a      	str	r2, [r7, #32]
 800418e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	61bb      	str	r3, [r7, #24]
   return(result);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e00f      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d09f      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3740      	adds	r7, #64	; 0x40
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b095      	sub	sp, #84	; 0x54
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800420c:	643a      	str	r2, [r7, #64]	; 0x40
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b01      	cmp	r3, #1
 800425a:	d119      	bne.n	8004290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800427c:	61ba      	str	r2, [r7, #24]
 800427e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800429e:	bf00      	nop
 80042a0:	3754      	adds	r7, #84	; 0x54
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff ff09 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b21      	cmp	r3, #33	; 0x21
 80042e4:	d13e      	bne.n	8004364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	d114      	bne.n	800431a <UART_Transmit_IT+0x48>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d110      	bne.n	800431a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	621a      	str	r2, [r3, #32]
 8004318:	e008      	b.n	800432c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	1c59      	adds	r1, r3, #1
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6211      	str	r1, [r2, #32]
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4619      	mov	r1, r3
 800433a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800434e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e000      	b.n	8004366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fe8e 	bl	80040b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b08c      	sub	sp, #48	; 0x30
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b22      	cmp	r3, #34	; 0x22
 80043b4:	f040 80ab 	bne.w	800450e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d117      	bne.n	80043f2 <UART_Receive_IT+0x50>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d113      	bne.n	80043f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
 80043f0:	e026      	b.n	8004440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d007      	beq.n	8004416 <UART_Receive_IT+0x74>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <UART_Receive_IT+0x82>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e008      	b.n	8004436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004430:	b2da      	uxtb	r2, r3
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4619      	mov	r1, r3
 800444e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004450:	2b00      	cmp	r3, #0
 8004452:	d15a      	bne.n	800450a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0220 	bic.w	r2, r2, #32
 8004462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	2b01      	cmp	r3, #1
 8004492:	d135      	bne.n	8004500 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	613b      	str	r3, [r7, #16]
   return(result);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	623a      	str	r2, [r7, #32]
 80044bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	69f9      	ldr	r1, [r7, #28]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d10a      	bne.n	80044f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fdf9 	bl	80040f0 <HAL_UARTEx_RxEventCallback>
 80044fe:	e002      	b.n	8004506 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fde1 	bl	80040c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e002      	b.n	8004510 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3730      	adds	r7, #48	; 0x30
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	b09f      	sub	sp, #124	; 0x7c
 800451e:	af00      	add	r7, sp, #0
 8004520:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	68d9      	ldr	r1, [r3, #12]
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	ea40 0301 	orr.w	r3, r0, r1
 8004538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	431a      	orrs	r2, r3
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800455c:	f021 010c 	bic.w	r1, r1, #12
 8004560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004566:	430b      	orrs	r3, r1
 8004568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	6999      	ldr	r1, [r3, #24]
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	ea40 0301 	orr.w	r3, r0, r1
 8004580:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4bc5      	ldr	r3, [pc, #788]	; (800489c <UART_SetConfig+0x384>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d004      	beq.n	8004596 <UART_SetConfig+0x7e>
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4bc3      	ldr	r3, [pc, #780]	; (80048a0 <UART_SetConfig+0x388>)
 8004592:	429a      	cmp	r2, r3
 8004594:	d103      	bne.n	800459e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004596:	f7fe fa85 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 800459a:	6778      	str	r0, [r7, #116]	; 0x74
 800459c:	e002      	b.n	80045a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800459e:	f7fe fa6d 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 80045a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ac:	f040 80b6 	bne.w	800471c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b2:	461c      	mov	r4, r3
 80045b4:	f04f 0500 	mov.w	r5, #0
 80045b8:	4622      	mov	r2, r4
 80045ba:	462b      	mov	r3, r5
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	6439      	str	r1, [r7, #64]	; 0x40
 80045c0:	415b      	adcs	r3, r3
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
 80045c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045c8:	1912      	adds	r2, r2, r4
 80045ca:	eb45 0303 	adc.w	r3, r5, r3
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	00d9      	lsls	r1, r3, #3
 80045d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045dc:	00d0      	lsls	r0, r2, #3
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	1911      	adds	r1, r2, r4
 80045e4:	6639      	str	r1, [r7, #96]	; 0x60
 80045e6:	416b      	adcs	r3, r5
 80045e8:	667b      	str	r3, [r7, #100]	; 0x64
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f8:	415b      	adcs	r3, r3
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004604:	f7fb fe54 	bl	80002b0 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4ba5      	ldr	r3, [pc, #660]	; (80048a4 <UART_SetConfig+0x38c>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011e      	lsls	r6, r3, #4
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	461c      	mov	r4, r3
 800461a:	f04f 0500 	mov.w	r5, #0
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	1891      	adds	r1, r2, r2
 8004624:	6339      	str	r1, [r7, #48]	; 0x30
 8004626:	415b      	adcs	r3, r3
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800462e:	1912      	adds	r2, r2, r4
 8004630:	eb45 0303 	adc.w	r3, r5, r3
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	00d9      	lsls	r1, r3, #3
 800463e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004642:	00d0      	lsls	r0, r2, #3
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	1911      	adds	r1, r2, r4
 800464a:	65b9      	str	r1, [r7, #88]	; 0x58
 800464c:	416b      	adcs	r3, r5
 800464e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	1891      	adds	r1, r2, r2
 800465c:	62b9      	str	r1, [r7, #40]	; 0x28
 800465e:	415b      	adcs	r3, r3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800466a:	f7fb fe21 	bl	80002b0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b8c      	ldr	r3, [pc, #560]	; (80048a4 <UART_SetConfig+0x38c>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <UART_SetConfig+0x38c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441e      	add	r6, r3
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	4618      	mov	r0, r3
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	1894      	adds	r4, r2, r2
 80046a4:	623c      	str	r4, [r7, #32]
 80046a6:	415b      	adcs	r3, r3
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ae:	1812      	adds	r2, r2, r0
 80046b0:	eb41 0303 	adc.w	r3, r1, r3
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	f04f 0500 	mov.w	r5, #0
 80046bc:	00dd      	lsls	r5, r3, #3
 80046be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046c2:	00d4      	lsls	r4, r2, #3
 80046c4:	4622      	mov	r2, r4
 80046c6:	462b      	mov	r3, r5
 80046c8:	1814      	adds	r4, r2, r0
 80046ca:	653c      	str	r4, [r7, #80]	; 0x50
 80046cc:	414b      	adcs	r3, r1
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	1891      	adds	r1, r2, r2
 80046dc:	61b9      	str	r1, [r7, #24]
 80046de:	415b      	adcs	r3, r3
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046ea:	f7fb fde1 	bl	80002b0 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <UART_SetConfig+0x38c>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	; 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	3332      	adds	r3, #50	; 0x32
 8004706:	4a67      	ldr	r2, [pc, #412]	; (80048a4 <UART_SetConfig+0x38c>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 0207 	and.w	r2, r3, #7
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4432      	add	r2, r6
 8004718:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800471a:	e0b9      	b.n	8004890 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800471c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471e:	461c      	mov	r4, r3
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	1891      	adds	r1, r2, r2
 800472a:	6139      	str	r1, [r7, #16]
 800472c:	415b      	adcs	r3, r3
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004734:	1912      	adds	r2, r2, r4
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f04f 0000 	mov.w	r0, #0
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	00d9      	lsls	r1, r3, #3
 8004744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004748:	00d0      	lsls	r0, r2, #3
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	eb12 0804 	adds.w	r8, r2, r4
 8004752:	eb43 0905 	adc.w	r9, r3, r5
 8004756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	008b      	lsls	r3, r1, #2
 800476a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800476e:	0082      	lsls	r2, r0, #2
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fb fd9c 	bl	80002b0 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <UART_SetConfig+0x38c>)
 800477e:	fba3 2302 	umull	r2, r3, r3, r2
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	011e      	lsls	r6, r3, #4
 8004786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004788:	4618      	mov	r0, r3
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	1894      	adds	r4, r2, r2
 8004794:	60bc      	str	r4, [r7, #8]
 8004796:	415b      	adcs	r3, r3
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800479e:	1812      	adds	r2, r2, r0
 80047a0:	eb41 0303 	adc.w	r3, r1, r3
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	f04f 0500 	mov.w	r5, #0
 80047ac:	00dd      	lsls	r5, r3, #3
 80047ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047b2:	00d4      	lsls	r4, r2, #3
 80047b4:	4622      	mov	r2, r4
 80047b6:	462b      	mov	r3, r5
 80047b8:	1814      	adds	r4, r2, r0
 80047ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80047bc:	414b      	adcs	r3, r1
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047d8:	0082      	lsls	r2, r0, #2
 80047da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047de:	f7fb fd67 	bl	80002b0 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <UART_SetConfig+0x38c>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <UART_SetConfig+0x38c>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	441e      	add	r6, r3
 8004808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480a:	4618      	mov	r0, r3
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	1894      	adds	r4, r2, r2
 8004816:	603c      	str	r4, [r7, #0]
 8004818:	415b      	adcs	r3, r3
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004820:	1812      	adds	r2, r2, r0
 8004822:	eb41 0303 	adc.w	r3, r1, r3
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	f04f 0500 	mov.w	r5, #0
 800482e:	00dd      	lsls	r5, r3, #3
 8004830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004834:	00d4      	lsls	r4, r2, #3
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	eb12 0a00 	adds.w	sl, r2, r0
 800483e:	eb43 0b01 	adc.w	fp, r3, r1
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	008b      	lsls	r3, r1, #2
 8004856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800485a:	0082      	lsls	r2, r0, #2
 800485c:	4650      	mov	r0, sl
 800485e:	4659      	mov	r1, fp
 8004860:	f7fb fd26 	bl	80002b0 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <UART_SetConfig+0x38c>)
 800486a:	fba3 1302 	umull	r1, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2164      	movs	r1, #100	; 0x64
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	; 0x32
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <UART_SetConfig+0x38c>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4432      	add	r2, r6
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	377c      	adds	r7, #124	; 0x7c
 8004894:	46bd      	mov	sp, r7
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	bf00      	nop
 800489c:	40011000 	.word	0x40011000
 80048a0:	40011400 	.word	0x40011400
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4d0d      	ldr	r5, [pc, #52]	; (80048ec <__libc_init_array+0x38>)
 80048b8:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048ba:	1b64      	subs	r4, r4, r5
 80048bc:	10a4      	asrs	r4, r4, #2
 80048be:	2600      	movs	r6, #0
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	4d0b      	ldr	r5, [pc, #44]	; (80048f4 <__libc_init_array+0x40>)
 80048c6:	4c0c      	ldr	r4, [pc, #48]	; (80048f8 <__libc_init_array+0x44>)
 80048c8:	f000 fc4e 	bl	8005168 <_init>
 80048cc:	1b64      	subs	r4, r4, r5
 80048ce:	10a4      	asrs	r4, r4, #2
 80048d0:	2600      	movs	r6, #0
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	080051f0 	.word	0x080051f0
 80048f0:	080051f0 	.word	0x080051f0
 80048f4:	080051f0 	.word	0x080051f0
 80048f8:	080051f4 	.word	0x080051f4

080048fc <memset>:
 80048fc:	4402      	add	r2, r0
 80048fe:	4603      	mov	r3, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <siprintf>:
 800490c:	b40e      	push	{r1, r2, r3}
 800490e:	b500      	push	{lr}
 8004910:	b09c      	sub	sp, #112	; 0x70
 8004912:	ab1d      	add	r3, sp, #116	; 0x74
 8004914:	9002      	str	r0, [sp, #8]
 8004916:	9006      	str	r0, [sp, #24]
 8004918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800491c:	4809      	ldr	r0, [pc, #36]	; (8004944 <siprintf+0x38>)
 800491e:	9107      	str	r1, [sp, #28]
 8004920:	9104      	str	r1, [sp, #16]
 8004922:	4909      	ldr	r1, [pc, #36]	; (8004948 <siprintf+0x3c>)
 8004924:	f853 2b04 	ldr.w	r2, [r3], #4
 8004928:	9105      	str	r1, [sp, #20]
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	a902      	add	r1, sp, #8
 8004930:	f000 f868 	bl	8004a04 <_svfiprintf_r>
 8004934:	9b02      	ldr	r3, [sp, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	b01c      	add	sp, #112	; 0x70
 800493c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004940:	b003      	add	sp, #12
 8004942:	4770      	bx	lr
 8004944:	2000000c 	.word	0x2000000c
 8004948:	ffff0208 	.word	0xffff0208

0800494c <__ssputs_r>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	688e      	ldr	r6, [r1, #8]
 8004952:	429e      	cmp	r6, r3
 8004954:	4682      	mov	sl, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4690      	mov	r8, r2
 800495a:	461f      	mov	r7, r3
 800495c:	d838      	bhi.n	80049d0 <__ssputs_r+0x84>
 800495e:	898a      	ldrh	r2, [r1, #12]
 8004960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004964:	d032      	beq.n	80049cc <__ssputs_r+0x80>
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	6909      	ldr	r1, [r1, #16]
 800496a:	eba5 0901 	sub.w	r9, r5, r1
 800496e:	6965      	ldr	r5, [r4, #20]
 8004970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004978:	3301      	adds	r3, #1
 800497a:	444b      	add	r3, r9
 800497c:	106d      	asrs	r5, r5, #1
 800497e:	429d      	cmp	r5, r3
 8004980:	bf38      	it	cc
 8004982:	461d      	movcc	r5, r3
 8004984:	0553      	lsls	r3, r2, #21
 8004986:	d531      	bpl.n	80049ec <__ssputs_r+0xa0>
 8004988:	4629      	mov	r1, r5
 800498a:	f000 fb47 	bl	800501c <_malloc_r>
 800498e:	4606      	mov	r6, r0
 8004990:	b950      	cbnz	r0, 80049a8 <__ssputs_r+0x5c>
 8004992:	230c      	movs	r3, #12
 8004994:	f8ca 3000 	str.w	r3, [sl]
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	6921      	ldr	r1, [r4, #16]
 80049aa:	464a      	mov	r2, r9
 80049ac:	f000 fabe 	bl	8004f2c <memcpy>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	6126      	str	r6, [r4, #16]
 80049be:	6165      	str	r5, [r4, #20]
 80049c0:	444e      	add	r6, r9
 80049c2:	eba5 0509 	sub.w	r5, r5, r9
 80049c6:	6026      	str	r6, [r4, #0]
 80049c8:	60a5      	str	r5, [r4, #8]
 80049ca:	463e      	mov	r6, r7
 80049cc:	42be      	cmp	r6, r7
 80049ce:	d900      	bls.n	80049d2 <__ssputs_r+0x86>
 80049d0:	463e      	mov	r6, r7
 80049d2:	4632      	mov	r2, r6
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	4641      	mov	r1, r8
 80049d8:	f000 fab6 	bl	8004f48 <memmove>
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	4432      	add	r2, r6
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6022      	str	r2, [r4, #0]
 80049e8:	2000      	movs	r0, #0
 80049ea:	e7db      	b.n	80049a4 <__ssputs_r+0x58>
 80049ec:	462a      	mov	r2, r5
 80049ee:	f000 fb6f 	bl	80050d0 <_realloc_r>
 80049f2:	4606      	mov	r6, r0
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1e1      	bne.n	80049bc <__ssputs_r+0x70>
 80049f8:	6921      	ldr	r1, [r4, #16]
 80049fa:	4650      	mov	r0, sl
 80049fc:	f000 fabe 	bl	8004f7c <_free_r>
 8004a00:	e7c7      	b.n	8004992 <__ssputs_r+0x46>
	...

08004a04 <_svfiprintf_r>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	4698      	mov	r8, r3
 8004a0a:	898b      	ldrh	r3, [r1, #12]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	b09d      	sub	sp, #116	; 0x74
 8004a10:	4607      	mov	r7, r0
 8004a12:	460d      	mov	r5, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	d50e      	bpl.n	8004a36 <_svfiprintf_r+0x32>
 8004a18:	690b      	ldr	r3, [r1, #16]
 8004a1a:	b963      	cbnz	r3, 8004a36 <_svfiprintf_r+0x32>
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	f000 fafd 	bl	800501c <_malloc_r>
 8004a22:	6028      	str	r0, [r5, #0]
 8004a24:	6128      	str	r0, [r5, #16]
 8004a26:	b920      	cbnz	r0, 8004a32 <_svfiprintf_r+0x2e>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e0d1      	b.n	8004bd6 <_svfiprintf_r+0x1d2>
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	616b      	str	r3, [r5, #20]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a44:	2330      	movs	r3, #48	; 0x30
 8004a46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bf0 <_svfiprintf_r+0x1ec>
 8004a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a4e:	f04f 0901 	mov.w	r9, #1
 8004a52:	4623      	mov	r3, r4
 8004a54:	469a      	mov	sl, r3
 8004a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5a:	b10a      	cbz	r2, 8004a60 <_svfiprintf_r+0x5c>
 8004a5c:	2a25      	cmp	r2, #37	; 0x25
 8004a5e:	d1f9      	bne.n	8004a54 <_svfiprintf_r+0x50>
 8004a60:	ebba 0b04 	subs.w	fp, sl, r4
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x7a>
 8004a66:	465b      	mov	r3, fp
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ff6d 	bl	800494c <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80aa 	beq.w	8004bcc <_svfiprintf_r+0x1c8>
 8004a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a7a:	445a      	add	r2, fp
 8004a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80a2 	beq.w	8004bcc <_svfiprintf_r+0x1c8>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a92:	f10a 0a01 	add.w	sl, sl, #1
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	4851      	ldr	r0, [pc, #324]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004aaa:	f7fb fbb1 	bl	8000210 <memchr>
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	b9d8      	cbnz	r0, 8004aea <_svfiprintf_r+0xe6>
 8004ab2:	06d0      	lsls	r0, r2, #27
 8004ab4:	bf44      	itt	mi
 8004ab6:	2320      	movmi	r3, #32
 8004ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004abc:	0711      	lsls	r1, r2, #28
 8004abe:	bf44      	itt	mi
 8004ac0:	232b      	movmi	r3, #43	; 0x2b
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b2a      	cmp	r3, #42	; 0x2a
 8004acc:	d015      	beq.n	8004afa <_svfiprintf_r+0xf6>
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	4654      	mov	r4, sl
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f04f 0c0a 	mov.w	ip, #10
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ade:	3b30      	subs	r3, #48	; 0x30
 8004ae0:	2b09      	cmp	r3, #9
 8004ae2:	d94e      	bls.n	8004b82 <_svfiprintf_r+0x17e>
 8004ae4:	b1b0      	cbz	r0, 8004b14 <_svfiprintf_r+0x110>
 8004ae6:	9207      	str	r2, [sp, #28]
 8004ae8:	e014      	b.n	8004b14 <_svfiprintf_r+0x110>
 8004aea:	eba0 0308 	sub.w	r3, r0, r8
 8004aee:	fa09 f303 	lsl.w	r3, r9, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	46a2      	mov	sl, r4
 8004af8:	e7d2      	b.n	8004aa0 <_svfiprintf_r+0x9c>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	9103      	str	r1, [sp, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfbb      	ittet	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0c:	9307      	strge	r3, [sp, #28]
 8004b0e:	9307      	strlt	r3, [sp, #28]
 8004b10:	bfb8      	it	lt
 8004b12:	9204      	strlt	r2, [sp, #16]
 8004b14:	7823      	ldrb	r3, [r4, #0]
 8004b16:	2b2e      	cmp	r3, #46	; 0x2e
 8004b18:	d10c      	bne.n	8004b34 <_svfiprintf_r+0x130>
 8004b1a:	7863      	ldrb	r3, [r4, #1]
 8004b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1e:	d135      	bne.n	8004b8c <_svfiprintf_r+0x188>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	9203      	str	r2, [sp, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bfb8      	it	lt
 8004b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b30:	3402      	adds	r4, #2
 8004b32:	9305      	str	r3, [sp, #20]
 8004b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c00 <_svfiprintf_r+0x1fc>
 8004b38:	7821      	ldrb	r1, [r4, #0]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	f7fb fb67 	bl	8000210 <memchr>
 8004b42:	b140      	cbz	r0, 8004b56 <_svfiprintf_r+0x152>
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	eba0 000a 	sub.w	r0, r0, sl
 8004b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	4303      	orrs	r3, r0
 8004b52:	3401      	adds	r4, #1
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5a:	4826      	ldr	r0, [pc, #152]	; (8004bf4 <_svfiprintf_r+0x1f0>)
 8004b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b60:	2206      	movs	r2, #6
 8004b62:	f7fb fb55 	bl	8000210 <memchr>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d038      	beq.n	8004bdc <_svfiprintf_r+0x1d8>
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <_svfiprintf_r+0x1f4>)
 8004b6c:	bb1b      	cbnz	r3, 8004bb6 <_svfiprintf_r+0x1b2>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	3307      	adds	r3, #7
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	3308      	adds	r3, #8
 8004b78:	9303      	str	r3, [sp, #12]
 8004b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7c:	4433      	add	r3, r6
 8004b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b80:	e767      	b.n	8004a52 <_svfiprintf_r+0x4e>
 8004b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b86:	460c      	mov	r4, r1
 8004b88:	2001      	movs	r0, #1
 8004b8a:	e7a5      	b.n	8004ad8 <_svfiprintf_r+0xd4>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	3401      	adds	r4, #1
 8004b90:	9305      	str	r3, [sp, #20]
 8004b92:	4619      	mov	r1, r3
 8004b94:	f04f 0c0a 	mov.w	ip, #10
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9e:	3a30      	subs	r2, #48	; 0x30
 8004ba0:	2a09      	cmp	r2, #9
 8004ba2:	d903      	bls.n	8004bac <_svfiprintf_r+0x1a8>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0c5      	beq.n	8004b34 <_svfiprintf_r+0x130>
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	e7c3      	b.n	8004b34 <_svfiprintf_r+0x130>
 8004bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e7f0      	b.n	8004b98 <_svfiprintf_r+0x194>
 8004bb6:	ab03      	add	r3, sp, #12
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	462a      	mov	r2, r5
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <_svfiprintf_r+0x1f8>)
 8004bbe:	a904      	add	r1, sp, #16
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f3af 8000 	nop.w
 8004bc6:	1c42      	adds	r2, r0, #1
 8004bc8:	4606      	mov	r6, r0
 8004bca:	d1d6      	bne.n	8004b7a <_svfiprintf_r+0x176>
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	065b      	lsls	r3, r3, #25
 8004bd0:	f53f af2c 	bmi.w	8004a2c <_svfiprintf_r+0x28>
 8004bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bd6:	b01d      	add	sp, #116	; 0x74
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <_svfiprintf_r+0x1f8>)
 8004be4:	a904      	add	r1, sp, #16
 8004be6:	4638      	mov	r0, r7
 8004be8:	f000 f87a 	bl	8004ce0 <_printf_i>
 8004bec:	e7eb      	b.n	8004bc6 <_svfiprintf_r+0x1c2>
 8004bee:	bf00      	nop
 8004bf0:	080051b4 	.word	0x080051b4
 8004bf4:	080051be 	.word	0x080051be
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	0800494d 	.word	0x0800494d
 8004c00:	080051ba 	.word	0x080051ba

08004c04 <_printf_common>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	4616      	mov	r6, r2
 8004c0a:	4699      	mov	r9, r3
 8004c0c:	688a      	ldr	r2, [r1, #8]
 8004c0e:	690b      	ldr	r3, [r1, #16]
 8004c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bfb8      	it	lt
 8004c18:	4613      	movlt	r3, r2
 8004c1a:	6033      	str	r3, [r6, #0]
 8004c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c20:	4607      	mov	r7, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	b10a      	cbz	r2, 8004c2a <_printf_common+0x26>
 8004c26:	3301      	adds	r3, #1
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	0699      	lsls	r1, r3, #26
 8004c2e:	bf42      	ittt	mi
 8004c30:	6833      	ldrmi	r3, [r6, #0]
 8004c32:	3302      	addmi	r3, #2
 8004c34:	6033      	strmi	r3, [r6, #0]
 8004c36:	6825      	ldr	r5, [r4, #0]
 8004c38:	f015 0506 	ands.w	r5, r5, #6
 8004c3c:	d106      	bne.n	8004c4c <_printf_common+0x48>
 8004c3e:	f104 0a19 	add.w	sl, r4, #25
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	6832      	ldr	r2, [r6, #0]
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	dc26      	bgt.n	8004c9a <_printf_common+0x96>
 8004c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c50:	1e13      	subs	r3, r2, #0
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	bf18      	it	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	0692      	lsls	r2, r2, #26
 8004c5a:	d42b      	bmi.n	8004cb4 <_printf_common+0xb0>
 8004c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c60:	4649      	mov	r1, r9
 8004c62:	4638      	mov	r0, r7
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d01e      	beq.n	8004ca8 <_printf_common+0xa4>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	68e5      	ldr	r5, [r4, #12]
 8004c6e:	6832      	ldr	r2, [r6, #0]
 8004c70:	f003 0306 	and.w	r3, r3, #6
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	bf08      	it	eq
 8004c78:	1aad      	subeq	r5, r5, r2
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	6922      	ldr	r2, [r4, #16]
 8004c7e:	bf0c      	ite	eq
 8004c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c84:	2500      	movne	r5, #0
 8004c86:	4293      	cmp	r3, r2
 8004c88:	bfc4      	itt	gt
 8004c8a:	1a9b      	subgt	r3, r3, r2
 8004c8c:	18ed      	addgt	r5, r5, r3
 8004c8e:	2600      	movs	r6, #0
 8004c90:	341a      	adds	r4, #26
 8004c92:	42b5      	cmp	r5, r6
 8004c94:	d11a      	bne.n	8004ccc <_printf_common+0xc8>
 8004c96:	2000      	movs	r0, #0
 8004c98:	e008      	b.n	8004cac <_printf_common+0xa8>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4652      	mov	r2, sl
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	47c0      	blx	r8
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d103      	bne.n	8004cb0 <_printf_common+0xac>
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	e7c6      	b.n	8004c42 <_printf_common+0x3e>
 8004cb4:	18e1      	adds	r1, r4, r3
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	2030      	movs	r0, #48	; 0x30
 8004cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cbe:	4422      	add	r2, r4
 8004cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cc8:	3302      	adds	r3, #2
 8004cca:	e7c7      	b.n	8004c5c <_printf_common+0x58>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4622      	mov	r2, r4
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d0e6      	beq.n	8004ca8 <_printf_common+0xa4>
 8004cda:	3601      	adds	r6, #1
 8004cdc:	e7d9      	b.n	8004c92 <_printf_common+0x8e>
	...

08004ce0 <_printf_i>:
 8004ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4691      	mov	r9, r2
 8004ce8:	7e27      	ldrb	r7, [r4, #24]
 8004cea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cec:	2f78      	cmp	r7, #120	; 0x78
 8004cee:	4680      	mov	r8, r0
 8004cf0:	469a      	mov	sl, r3
 8004cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf6:	d807      	bhi.n	8004d08 <_printf_i+0x28>
 8004cf8:	2f62      	cmp	r7, #98	; 0x62
 8004cfa:	d80a      	bhi.n	8004d12 <_printf_i+0x32>
 8004cfc:	2f00      	cmp	r7, #0
 8004cfe:	f000 80d8 	beq.w	8004eb2 <_printf_i+0x1d2>
 8004d02:	2f58      	cmp	r7, #88	; 0x58
 8004d04:	f000 80a3 	beq.w	8004e4e <_printf_i+0x16e>
 8004d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d10:	e03a      	b.n	8004d88 <_printf_i+0xa8>
 8004d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d16:	2b15      	cmp	r3, #21
 8004d18:	d8f6      	bhi.n	8004d08 <_printf_i+0x28>
 8004d1a:	a001      	add	r0, pc, #4	; (adr r0, 8004d20 <_printf_i+0x40>)
 8004d1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d8d 	.word	0x08004d8d
 8004d28:	08004d09 	.word	0x08004d09
 8004d2c:	08004d09 	.word	0x08004d09
 8004d30:	08004d09 	.word	0x08004d09
 8004d34:	08004d09 	.word	0x08004d09
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004d09 	.word	0x08004d09
 8004d40:	08004d09 	.word	0x08004d09
 8004d44:	08004d09 	.word	0x08004d09
 8004d48:	08004d09 	.word	0x08004d09
 8004d4c:	08004e99 	.word	0x08004e99
 8004d50:	08004dbd 	.word	0x08004dbd
 8004d54:	08004e7b 	.word	0x08004e7b
 8004d58:	08004d09 	.word	0x08004d09
 8004d5c:	08004d09 	.word	0x08004d09
 8004d60:	08004ebb 	.word	0x08004ebb
 8004d64:	08004d09 	.word	0x08004d09
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d09 	.word	0x08004d09
 8004d70:	08004d09 	.word	0x08004d09
 8004d74:	08004e83 	.word	0x08004e83
 8004d78:	680b      	ldr	r3, [r1, #0]
 8004d7a:	1d1a      	adds	r2, r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	600a      	str	r2, [r1, #0]
 8004d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0a3      	b.n	8004ed4 <_printf_i+0x1f4>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	6808      	ldr	r0, [r1, #0]
 8004d90:	062e      	lsls	r6, r5, #24
 8004d92:	f100 0304 	add.w	r3, r0, #4
 8004d96:	d50a      	bpl.n	8004dae <_printf_i+0xce>
 8004d98:	6805      	ldr	r5, [r0, #0]
 8004d9a:	600b      	str	r3, [r1, #0]
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	da03      	bge.n	8004da8 <_printf_i+0xc8>
 8004da0:	232d      	movs	r3, #45	; 0x2d
 8004da2:	426d      	negs	r5, r5
 8004da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da8:	485e      	ldr	r0, [pc, #376]	; (8004f24 <_printf_i+0x244>)
 8004daa:	230a      	movs	r3, #10
 8004dac:	e019      	b.n	8004de2 <_printf_i+0x102>
 8004dae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004db2:	6805      	ldr	r5, [r0, #0]
 8004db4:	600b      	str	r3, [r1, #0]
 8004db6:	bf18      	it	ne
 8004db8:	b22d      	sxthne	r5, r5
 8004dba:	e7ef      	b.n	8004d9c <_printf_i+0xbc>
 8004dbc:	680b      	ldr	r3, [r1, #0]
 8004dbe:	6825      	ldr	r5, [r4, #0]
 8004dc0:	1d18      	adds	r0, r3, #4
 8004dc2:	6008      	str	r0, [r1, #0]
 8004dc4:	0628      	lsls	r0, r5, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xec>
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0xf2>
 8004dcc:	0669      	lsls	r1, r5, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xe8>
 8004dd0:	881d      	ldrh	r5, [r3, #0]
 8004dd2:	4854      	ldr	r0, [pc, #336]	; (8004f24 <_printf_i+0x244>)
 8004dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2308      	moveq	r3, #8
 8004dda:	230a      	movne	r3, #10
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de2:	6866      	ldr	r6, [r4, #4]
 8004de4:	60a6      	str	r6, [r4, #8]
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	bfa2      	ittt	ge
 8004dea:	6821      	ldrge	r1, [r4, #0]
 8004dec:	f021 0104 	bicge.w	r1, r1, #4
 8004df0:	6021      	strge	r1, [r4, #0]
 8004df2:	b90d      	cbnz	r5, 8004df8 <_printf_i+0x118>
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	d04d      	beq.n	8004e94 <_printf_i+0x1b4>
 8004df8:	4616      	mov	r6, r2
 8004dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8004e02:	5dc7      	ldrb	r7, [r0, r7]
 8004e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e08:	462f      	mov	r7, r5
 8004e0a:	42bb      	cmp	r3, r7
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	d9f4      	bls.n	8004dfa <_printf_i+0x11a>
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10b      	bne.n	8004e2c <_printf_i+0x14c>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	07df      	lsls	r7, r3, #31
 8004e18:	d508      	bpl.n	8004e2c <_printf_i+0x14c>
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	6861      	ldr	r1, [r4, #4]
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	bfde      	ittt	le
 8004e22:	2330      	movle	r3, #48	; 0x30
 8004e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e2c:	1b92      	subs	r2, r2, r6
 8004e2e:	6122      	str	r2, [r4, #16]
 8004e30:	f8cd a000 	str.w	sl, [sp]
 8004e34:	464b      	mov	r3, r9
 8004e36:	aa03      	add	r2, sp, #12
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fee2 	bl	8004c04 <_printf_common>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d14c      	bne.n	8004ede <_printf_i+0x1fe>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b004      	add	sp, #16
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	4835      	ldr	r0, [pc, #212]	; (8004f24 <_printf_i+0x244>)
 8004e50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	680e      	ldr	r6, [r1, #0]
 8004e58:	061f      	lsls	r7, r3, #24
 8004e5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e5e:	600e      	str	r6, [r1, #0]
 8004e60:	d514      	bpl.n	8004e8c <_printf_i+0x1ac>
 8004e62:	07d9      	lsls	r1, r3, #31
 8004e64:	bf44      	itt	mi
 8004e66:	f043 0320 	orrmi.w	r3, r3, #32
 8004e6a:	6023      	strmi	r3, [r4, #0]
 8004e6c:	b91d      	cbnz	r5, 8004e76 <_printf_i+0x196>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f023 0320 	bic.w	r3, r3, #32
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	2310      	movs	r3, #16
 8004e78:	e7b0      	b.n	8004ddc <_printf_i+0xfc>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	f043 0320 	orr.w	r3, r3, #32
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	2378      	movs	r3, #120	; 0x78
 8004e84:	4828      	ldr	r0, [pc, #160]	; (8004f28 <_printf_i+0x248>)
 8004e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e8a:	e7e3      	b.n	8004e54 <_printf_i+0x174>
 8004e8c:	065e      	lsls	r6, r3, #25
 8004e8e:	bf48      	it	mi
 8004e90:	b2ad      	uxthmi	r5, r5
 8004e92:	e7e6      	b.n	8004e62 <_printf_i+0x182>
 8004e94:	4616      	mov	r6, r2
 8004e96:	e7bb      	b.n	8004e10 <_printf_i+0x130>
 8004e98:	680b      	ldr	r3, [r1, #0]
 8004e9a:	6826      	ldr	r6, [r4, #0]
 8004e9c:	6960      	ldr	r0, [r4, #20]
 8004e9e:	1d1d      	adds	r5, r3, #4
 8004ea0:	600d      	str	r5, [r1, #0]
 8004ea2:	0635      	lsls	r5, r6, #24
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	d501      	bpl.n	8004eac <_printf_i+0x1cc>
 8004ea8:	6018      	str	r0, [r3, #0]
 8004eaa:	e002      	b.n	8004eb2 <_printf_i+0x1d2>
 8004eac:	0671      	lsls	r1, r6, #25
 8004eae:	d5fb      	bpl.n	8004ea8 <_printf_i+0x1c8>
 8004eb0:	8018      	strh	r0, [r3, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6123      	str	r3, [r4, #16]
 8004eb6:	4616      	mov	r6, r2
 8004eb8:	e7ba      	b.n	8004e30 <_printf_i+0x150>
 8004eba:	680b      	ldr	r3, [r1, #0]
 8004ebc:	1d1a      	adds	r2, r3, #4
 8004ebe:	600a      	str	r2, [r1, #0]
 8004ec0:	681e      	ldr	r6, [r3, #0]
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7fb f9a2 	bl	8000210 <memchr>
 8004ecc:	b108      	cbz	r0, 8004ed2 <_printf_i+0x1f2>
 8004ece:	1b80      	subs	r0, r0, r6
 8004ed0:	6060      	str	r0, [r4, #4]
 8004ed2:	6863      	ldr	r3, [r4, #4]
 8004ed4:	6123      	str	r3, [r4, #16]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004edc:	e7a8      	b.n	8004e30 <_printf_i+0x150>
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	47d0      	blx	sl
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d0ab      	beq.n	8004e44 <_printf_i+0x164>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	079b      	lsls	r3, r3, #30
 8004ef0:	d413      	bmi.n	8004f1a <_printf_i+0x23a>
 8004ef2:	68e0      	ldr	r0, [r4, #12]
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	bfb8      	it	lt
 8004efa:	4618      	movlt	r0, r3
 8004efc:	e7a4      	b.n	8004e48 <_printf_i+0x168>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4632      	mov	r2, r6
 8004f02:	4649      	mov	r1, r9
 8004f04:	4640      	mov	r0, r8
 8004f06:	47d0      	blx	sl
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d09b      	beq.n	8004e44 <_printf_i+0x164>
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	9903      	ldr	r1, [sp, #12]
 8004f12:	1a5b      	subs	r3, r3, r1
 8004f14:	42ab      	cmp	r3, r5
 8004f16:	dcf2      	bgt.n	8004efe <_printf_i+0x21e>
 8004f18:	e7eb      	b.n	8004ef2 <_printf_i+0x212>
 8004f1a:	2500      	movs	r5, #0
 8004f1c:	f104 0619 	add.w	r6, r4, #25
 8004f20:	e7f5      	b.n	8004f0e <_printf_i+0x22e>
 8004f22:	bf00      	nop
 8004f24:	080051c5 	.word	0x080051c5
 8004f28:	080051d6 	.word	0x080051d6

08004f2c <memcpy>:
 8004f2c:	440a      	add	r2, r1
 8004f2e:	4291      	cmp	r1, r2
 8004f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f34:	d100      	bne.n	8004f38 <memcpy+0xc>
 8004f36:	4770      	bx	lr
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f42:	4291      	cmp	r1, r2
 8004f44:	d1f9      	bne.n	8004f3a <memcpy+0xe>
 8004f46:	bd10      	pop	{r4, pc}

08004f48 <memmove>:
 8004f48:	4288      	cmp	r0, r1
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	eb01 0402 	add.w	r4, r1, r2
 8004f50:	d902      	bls.n	8004f58 <memmove+0x10>
 8004f52:	4284      	cmp	r4, r0
 8004f54:	4623      	mov	r3, r4
 8004f56:	d807      	bhi.n	8004f68 <memmove+0x20>
 8004f58:	1e43      	subs	r3, r0, #1
 8004f5a:	42a1      	cmp	r1, r4
 8004f5c:	d008      	beq.n	8004f70 <memmove+0x28>
 8004f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f66:	e7f8      	b.n	8004f5a <memmove+0x12>
 8004f68:	4402      	add	r2, r0
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	d100      	bne.n	8004f72 <memmove+0x2a>
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f7a:	e7f7      	b.n	8004f6c <memmove+0x24>

08004f7c <_free_r>:
 8004f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	d048      	beq.n	8005014 <_free_r+0x98>
 8004f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f86:	9001      	str	r0, [sp, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f8e:	bfb8      	it	lt
 8004f90:	18e4      	addlt	r4, r4, r3
 8004f92:	f000 f8d3 	bl	800513c <__malloc_lock>
 8004f96:	4a20      	ldr	r2, [pc, #128]	; (8005018 <_free_r+0x9c>)
 8004f98:	9801      	ldr	r0, [sp, #4]
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	b933      	cbnz	r3, 8004fae <_free_r+0x32>
 8004fa0:	6063      	str	r3, [r4, #4]
 8004fa2:	6014      	str	r4, [r2, #0]
 8004fa4:	b003      	add	sp, #12
 8004fa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004faa:	f000 b8cd 	b.w	8005148 <__malloc_unlock>
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	d90b      	bls.n	8004fca <_free_r+0x4e>
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	1862      	adds	r2, r4, r1
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	bf04      	itt	eq
 8004fba:	681a      	ldreq	r2, [r3, #0]
 8004fbc:	685b      	ldreq	r3, [r3, #4]
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	bf04      	itt	eq
 8004fc2:	1852      	addeq	r2, r2, r1
 8004fc4:	6022      	streq	r2, [r4, #0]
 8004fc6:	602c      	str	r4, [r5, #0]
 8004fc8:	e7ec      	b.n	8004fa4 <_free_r+0x28>
 8004fca:	461a      	mov	r2, r3
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b10b      	cbz	r3, 8004fd4 <_free_r+0x58>
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d9fa      	bls.n	8004fca <_free_r+0x4e>
 8004fd4:	6811      	ldr	r1, [r2, #0]
 8004fd6:	1855      	adds	r5, r2, r1
 8004fd8:	42a5      	cmp	r5, r4
 8004fda:	d10b      	bne.n	8004ff4 <_free_r+0x78>
 8004fdc:	6824      	ldr	r4, [r4, #0]
 8004fde:	4421      	add	r1, r4
 8004fe0:	1854      	adds	r4, r2, r1
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	d1dd      	bne.n	8004fa4 <_free_r+0x28>
 8004fe8:	681c      	ldr	r4, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	6053      	str	r3, [r2, #4]
 8004fee:	4421      	add	r1, r4
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	e7d7      	b.n	8004fa4 <_free_r+0x28>
 8004ff4:	d902      	bls.n	8004ffc <_free_r+0x80>
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	6003      	str	r3, [r0, #0]
 8004ffa:	e7d3      	b.n	8004fa4 <_free_r+0x28>
 8004ffc:	6825      	ldr	r5, [r4, #0]
 8004ffe:	1961      	adds	r1, r4, r5
 8005000:	428b      	cmp	r3, r1
 8005002:	bf04      	itt	eq
 8005004:	6819      	ldreq	r1, [r3, #0]
 8005006:	685b      	ldreq	r3, [r3, #4]
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	bf04      	itt	eq
 800500c:	1949      	addeq	r1, r1, r5
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	6054      	str	r4, [r2, #4]
 8005012:	e7c7      	b.n	8004fa4 <_free_r+0x28>
 8005014:	b003      	add	sp, #12
 8005016:	bd30      	pop	{r4, r5, pc}
 8005018:	20000094 	.word	0x20000094

0800501c <_malloc_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	1ccd      	adds	r5, r1, #3
 8005020:	f025 0503 	bic.w	r5, r5, #3
 8005024:	3508      	adds	r5, #8
 8005026:	2d0c      	cmp	r5, #12
 8005028:	bf38      	it	cc
 800502a:	250c      	movcc	r5, #12
 800502c:	2d00      	cmp	r5, #0
 800502e:	4606      	mov	r6, r0
 8005030:	db01      	blt.n	8005036 <_malloc_r+0x1a>
 8005032:	42a9      	cmp	r1, r5
 8005034:	d903      	bls.n	800503e <_malloc_r+0x22>
 8005036:	230c      	movs	r3, #12
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	2000      	movs	r0, #0
 800503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503e:	f000 f87d 	bl	800513c <__malloc_lock>
 8005042:	4921      	ldr	r1, [pc, #132]	; (80050c8 <_malloc_r+0xac>)
 8005044:	680a      	ldr	r2, [r1, #0]
 8005046:	4614      	mov	r4, r2
 8005048:	b99c      	cbnz	r4, 8005072 <_malloc_r+0x56>
 800504a:	4f20      	ldr	r7, [pc, #128]	; (80050cc <_malloc_r+0xb0>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b923      	cbnz	r3, 800505a <_malloc_r+0x3e>
 8005050:	4621      	mov	r1, r4
 8005052:	4630      	mov	r0, r6
 8005054:	f000 f862 	bl	800511c <_sbrk_r>
 8005058:	6038      	str	r0, [r7, #0]
 800505a:	4629      	mov	r1, r5
 800505c:	4630      	mov	r0, r6
 800505e:	f000 f85d 	bl	800511c <_sbrk_r>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	d123      	bne.n	80050ae <_malloc_r+0x92>
 8005066:	230c      	movs	r3, #12
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f86c 	bl	8005148 <__malloc_unlock>
 8005070:	e7e3      	b.n	800503a <_malloc_r+0x1e>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	1b5b      	subs	r3, r3, r5
 8005076:	d417      	bmi.n	80050a8 <_malloc_r+0x8c>
 8005078:	2b0b      	cmp	r3, #11
 800507a:	d903      	bls.n	8005084 <_malloc_r+0x68>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	441c      	add	r4, r3
 8005080:	6025      	str	r5, [r4, #0]
 8005082:	e004      	b.n	800508e <_malloc_r+0x72>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	42a2      	cmp	r2, r4
 8005088:	bf0c      	ite	eq
 800508a:	600b      	streq	r3, [r1, #0]
 800508c:	6053      	strne	r3, [r2, #4]
 800508e:	4630      	mov	r0, r6
 8005090:	f000 f85a 	bl	8005148 <__malloc_unlock>
 8005094:	f104 000b 	add.w	r0, r4, #11
 8005098:	1d23      	adds	r3, r4, #4
 800509a:	f020 0007 	bic.w	r0, r0, #7
 800509e:	1ac2      	subs	r2, r0, r3
 80050a0:	d0cc      	beq.n	800503c <_malloc_r+0x20>
 80050a2:	1a1b      	subs	r3, r3, r0
 80050a4:	50a3      	str	r3, [r4, r2]
 80050a6:	e7c9      	b.n	800503c <_malloc_r+0x20>
 80050a8:	4622      	mov	r2, r4
 80050aa:	6864      	ldr	r4, [r4, #4]
 80050ac:	e7cc      	b.n	8005048 <_malloc_r+0x2c>
 80050ae:	1cc4      	adds	r4, r0, #3
 80050b0:	f024 0403 	bic.w	r4, r4, #3
 80050b4:	42a0      	cmp	r0, r4
 80050b6:	d0e3      	beq.n	8005080 <_malloc_r+0x64>
 80050b8:	1a21      	subs	r1, r4, r0
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 f82e 	bl	800511c <_sbrk_r>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d1dd      	bne.n	8005080 <_malloc_r+0x64>
 80050c4:	e7cf      	b.n	8005066 <_malloc_r+0x4a>
 80050c6:	bf00      	nop
 80050c8:	20000094 	.word	0x20000094
 80050cc:	20000098 	.word	0x20000098

080050d0 <_realloc_r>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	4607      	mov	r7, r0
 80050d4:	4614      	mov	r4, r2
 80050d6:	460e      	mov	r6, r1
 80050d8:	b921      	cbnz	r1, 80050e4 <_realloc_r+0x14>
 80050da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050de:	4611      	mov	r1, r2
 80050e0:	f7ff bf9c 	b.w	800501c <_malloc_r>
 80050e4:	b922      	cbnz	r2, 80050f0 <_realloc_r+0x20>
 80050e6:	f7ff ff49 	bl	8004f7c <_free_r>
 80050ea:	4625      	mov	r5, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f0:	f000 f830 	bl	8005154 <_malloc_usable_size_r>
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d20f      	bcs.n	8005118 <_realloc_r+0x48>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4638      	mov	r0, r7
 80050fc:	f7ff ff8e 	bl	800501c <_malloc_r>
 8005100:	4605      	mov	r5, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	d0f2      	beq.n	80050ec <_realloc_r+0x1c>
 8005106:	4631      	mov	r1, r6
 8005108:	4622      	mov	r2, r4
 800510a:	f7ff ff0f 	bl	8004f2c <memcpy>
 800510e:	4631      	mov	r1, r6
 8005110:	4638      	mov	r0, r7
 8005112:	f7ff ff33 	bl	8004f7c <_free_r>
 8005116:	e7e9      	b.n	80050ec <_realloc_r+0x1c>
 8005118:	4635      	mov	r5, r6
 800511a:	e7e7      	b.n	80050ec <_realloc_r+0x1c>

0800511c <_sbrk_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d06      	ldr	r5, [pc, #24]	; (8005138 <_sbrk_r+0x1c>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fb fe54 	bl	8000dd4 <_sbrk>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_sbrk_r+0x1a>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_sbrk_r+0x1a>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000220 	.word	0x20000220

0800513c <__malloc_lock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_lock+0x8>)
 800513e:	f000 b811 	b.w	8005164 <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	20000228 	.word	0x20000228

08005148 <__malloc_unlock>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__malloc_unlock+0x8>)
 800514a:	f000 b80c 	b.w	8005166 <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	20000228 	.word	0x20000228

08005154 <_malloc_usable_size_r>:
 8005154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005158:	1f18      	subs	r0, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfbc      	itt	lt
 800515e:	580b      	ldrlt	r3, [r1, r0]
 8005160:	18c0      	addlt	r0, r0, r3
 8005162:	4770      	bx	lr

08005164 <__retarget_lock_acquire_recursive>:
 8005164:	4770      	bx	lr

08005166 <__retarget_lock_release_recursive>:
 8005166:	4770      	bx	lr

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
